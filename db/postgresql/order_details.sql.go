// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order_details.sql

package db

import (
	"context"
	"encoding/json"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (user_id, total, payment_id)
VALUES ($1, $2, $3)
RETURNING oid, user_id, total, payment_id, created_at, updated_at
`

type CreateOrderDetailParams struct {
	UserID    int64  `db:"user_id"`
	Total     string `db:"total"`
	PaymentID int64  `db:"payment_id"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail, arg.UserID, arg.Total, arg.PaymentID)
	var i OrderDetail
	err := row.Scan(
		&i.Oid,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_details WHERE oid = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, oid int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, oid)
	return err
}

const getAllOrderDetails = `-- name: GetAllOrderDetails :many
SELECT oid, user_id, total, payment_id, created_at, updated_at FROM order_details
`

func (q *Queries) GetAllOrderDetails(ctx context.Context) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.Oid,
			&i.UserID,
			&i.Total,
			&i.PaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT oid, user_id, total, payment_id, created_at, updated_at FROM order_details WHERE oid = $1
`

func (q *Queries) GetOrderDetail(ctx context.Context, oid int64) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, oid)
	var i OrderDetail
	err := row.Scan(
		&i.Oid,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserOrders = `-- name: GetUserOrders :many
SELECT 
    json_agg(json_build_object(
        'order_id', od.oid,
        'total', od.total,
        'items', (
            SELECT json_agg(json_build_object(
                        'item_id', oi.oiid,
                        'product_id', oi.product_id,
                        'product_name', pr.name,
                        'product_description', pr.description,
                        'product_category', pr.category,
                        'product_price', pr.price,
                        'item_created_at', oi.created_at,
                        'item_updated_at', oi.updated_at
                    )
            ) FROM order_items oi
            JOIN products pr ON oi.product_id = pr.proid
            WHERE od.oid = oi.order_id
        ),
        'payment', json_build_object(
            'payment_id', p.pid,
            'amount', p.amount,
            'payment_type', p.payment_type,
            'status', p.status,
            'payment_created_at', p.created_at,
            'payment_updated_at', p.updated_at
        ),
        'order_created_at', od.created_at,
        'order_updated_at', od.updated_at
    ))
FROM 
    order_details od
JOIN
    payments p ON od.payment_id = p.pid
WHERE
    od.user_id = $1
`

func (q *Queries) GetUserOrders(ctx context.Context, userID int64) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var json_agg json.RawMessage
		if err := rows.Scan(&json_agg); err != nil {
			return nil, err
		}
		items = append(items, json_agg)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :one
UPDATE order_details
SET user_id = $2,
    total = $3,
    payment_id = $4,
    updated_at = now()
WHERE oid = $1
RETURNING oid, user_id, total, payment_id, created_at, updated_at
`

type UpdateOrderDetailParams struct {
	Oid       int64  `db:"oid"`
	UserID    int64  `db:"user_id"`
	Total     string `db:"total"`
	PaymentID int64  `db:"payment_id"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, updateOrderDetail,
		arg.Oid,
		arg.UserID,
		arg.Total,
		arg.PaymentID,
	)
	var i OrderDetail
	err := row.Scan(
		&i.Oid,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
