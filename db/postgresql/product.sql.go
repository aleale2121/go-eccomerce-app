// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name, description, category, price, stock
)
VALUES ($1, $2, $3, $4, $5)
RETURNING proid, name, description, category, price, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name        string `db:"name"`
	Description string `db:"description"`
	Category    string `db:"category"`
	Price       string `db:"price"`
	Stock       int32  `db:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.Proid,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE proid = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, proid int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, proid)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT proid, name, description, category, price, stock, created_at, updated_at FROM products WHERE proid = $1
`

func (q *Queries) GetProduct(ctx context.Context, proid int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, proid)
	var i Product
	err := row.Scan(
		&i.Proid,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT proid, name, description, category, price, stock, created_at, updated_at FROM products
ORDER BY proid
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Proid,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2,
    description = $3,
    category = $4,
    price = $5,
    stock = $6,
    updated_at = now()
WHERE proid = $1
RETURNING proid, name, description, category, price, stock, created_at, updated_at
`

type UpdateProductParams struct {
	Proid       int64  `db:"proid"`
	Name        string `db:"name"`
	Description string `db:"description"`
	Category    string `db:"category"`
	Price       string `db:"price"`
	Stock       int32  `db:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Proid,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.Proid,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
