// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, name, address, mobile_no
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING uid, username, password, name, address, mobile_no, created_at, updated_at
`

type CreateUserParams struct {
	Username string `db:"username"`
	Password string `db:"password"`
	Name     string `db:"name"`
	Address  string `db:"address"`
	MobileNo string `db:"mobile_no"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Address,
		arg.MobileNo,
	)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Address,
		&i.MobileNo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT uid, username, password, name, address, mobile_no, created_at, updated_at FROM users
WHERE uid = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Address,
		&i.MobileNo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT uid, username, password, name, address, mobile_no, created_at, updated_at FROM users
ORDER BY uid
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uid,
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Address,
			&i.MobileNo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set username = $2,
  password = $3,
  name = $4,
  address = $5,
  mobile_no = $6
WHERE uid = $1
RETURNING uid, username, password, name, address, mobile_no, created_at, updated_at
`

type UpdateUserParams struct {
	Uid      int64  `db:"uid"`
	Username string `db:"username"`
	Password string `db:"password"`
	Name     string `db:"name"`
	Address  string `db:"address"`
	MobileNo string `db:"mobile_no"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Uid,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Address,
		arg.MobileNo,
	)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Address,
		&i.MobileNo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
